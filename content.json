{"meta":{"title":"好高兴啊又吃成长快乐了","subtitle":"肥宅快乐站","description":"乌鸦很像写字台","author":"黄瓜","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-11-19T14:35:29.000Z","updated":"2018-11-19T14:35:59.572Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-11-19T14:36:25.000Z","updated":"2018-11-19T14:36:45.012Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2018-11-19T14:40:29.000Z","updated":"2018-11-19T14:48:34.046Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"乌鸦很像写字台关于前端 / 摄影 / 动漫萌新程序猿 欢迎小伙伴一起玩耍。 @乌鸦很像写字台企鹅：413137841"}],"posts":[{"title":"前后端分离——个人博客开发","slug":"前后端分离——个人博客开发","date":"2019-04-06T16:00:00.000Z","updated":"2019-04-08T14:53:41.939Z","comments":true,"path":"2019/04/07/前后端分离——个人博客开发/","link":"","permalink":"http://yoursite.com/2019/04/07/前后端分离——个人博客开发/","excerpt":"1 准备工作/创建项目后端","text":"1 准备工作/创建项目后端 创建node项目 npm init npm install express 安装依赖：npm install express --save 创建app.js: 123456var express = require('express');var app = express();app.listen(2333,function()&#123; console.log('server is on \"http://localhost:2333\"');&#125;); node app.js测试是否能运行； 前端创建vue项目 vue init webpack client npm install 测试是否能运行: npm run dev 2 开始进行前后端接口测试前端页面表单构建这个随便写个就好了；下次写好了再补上； ajax请求vue中请求数据需要使用第三方库axios 安装axios：cnpm install axios --save 1 引入axios并配置基础路径：（这里涉及到跨域请求node，所以所有请求前都需要添加node的基础地址） 1234567// client/src/main.jsimport axios from 'axios' // 引入axios组件axios.defaults.withCredentials = true // 跨域保存session有用axios.defaults.baseURL = 'http://localhost:2333' // 打包的时候直接删掉，默认基础路径在这里配置// 将 axios 赋值给 Vue，方便在子组件里面使用Vue.prototype.$reqs = axios 由于是跨域请求，所以需要配置withCredentials为true，可以避免每次都被识别为新的请求； 在vue中，可以使用代理去实现跨域，但是这样的话每次需要配置新地址，这里直接采用配置跨域，只需要一次配置。 2 在Login.vue中写登录的具体方法将如下登录请求代码写在 login方法中，登录的地址为 “/users/login” ，这个接口我们一会儿在node中去写。 12345678910111213141516171819202122// client/src/components/login.vuelogin () &#123; var _this = this this.disablebtn = true this.loginText = '登录中...' // this.$reqs就访问到了main.js中绑定的axios this.$reqs.post('/users/login', &#123; username: this.username, password: this.password &#125;).then(function (result) &#123; // 成功 console.log(result) _this.disablebtn = false _this.loginText = '登录' &#125;).catch(function (error) &#123; // 失败 console.log(error) _this.disablebtn = false _this.loginText = '登录' &#125;) &#125; 这里遇到过一个错误，加上console.log(error)就可以了，说明是因为没有用到error参数引起的报错……【ESLint真的很严格。 后端接口关于后端，需要注意： 必须使用body-parser中间件解析表单，否则req.body会无法解析，打印为undefied。 使用body-parser后，打印的data为{}。发现是没有解析JSON格式，所以读取不到数据，于是补上之后： 123const bodyPaser = require('body-paser') // express现在不使用body-parser中间件无法解析reqapp.use(bodyPaser.json) // 不写这句打印出来的data是&#123;&#125; app.use(bodyParser.urlencoded(&#123; extended: false&#125;)) 参考： 打通前后端全栈开发node+vue进阶【课程学习系统项目实战详细讲解】(1)：创建项目，完成登录功能 express做登录验证获取req.body为空对象问题","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"},{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"},{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"}]},{"title":"关于新手选择服务器（穷苦人民的烦恼）","slug":"关于新手选择服务器（穷苦人民的烦恼）","date":"2019-03-26T16:00:00.000Z","updated":"2019-03-28T14:15:34.476Z","comments":true,"path":"2019/03/27/关于新手选择服务器（穷苦人民的烦恼）/","link":"","permalink":"http://yoursite.com/2019/03/27/关于新手选择服务器（穷苦人民的烦恼）/","excerpt":"1 关于服务器的基础知识","text":"1 关于服务器的基础知识 什么是vps什么是CMS服务器可以用来做什么以上内容决定慢慢更新。 2 具体的服务器可选项国内目前只看学生优惠： 配置 价格 备注 腾讯云 CPU：1核内存：2G带宽：1M硬盘：Linux/Windows 50G ￥10/月 需要抢购，0点6个月使用时长 阿里云轻量应用服务器 CPU：1核内存：2G带宽：5M硬盘：40G SSD流量：1000G ￥9.5/月 有效期不能超过学生身份有效期，毕业后不能续费 阿里云云服务器ECS CPU：1核内存：2G带宽：1M硬盘：40G ￥9.5/月 同上 国外 配置 价格 备注 Digital Ocean CPU：1核内存：1G硬盘：25G SSD流量：1T $5/month US TRANSFER传输1T是啥，带宽？ Linode CPU：1核内存：1G硬盘：25G SSD流量：1T $5/month（￥30/月） US 搬砖工（bandewagonghost） 看到一个说售后不好且ip可能被墙…… Vultr CPU：1核内存：512M硬盘：10G SSD带宽：0.5T(ipv6) $2.5/month（15/月） 其实我不是很烦恼，因为我没有翻墙的硬需求，能上个Google就够了。所以便宜才是我的选择。over。由于目前只是练手个人站，配置没需求，所以不用纠结，真好。 参考： VULTR 2019年全部优惠码盘点（支持支付宝） 知乎VULTR话题 2019优质VPS服务商推荐 VPS大全","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"}]},{"title":"vue项目的坑:error-4048","slug":"vue项目的坑-`error-4048`","date":"2019-03-25T16:00:00.000Z","updated":"2019-03-27T15:11:23.003Z","comments":true,"path":"2019/03/26/vue项目的坑-`error-4048`/","link":"","permalink":"http://yoursite.com/2019/03/26/vue项目的坑-`error-4048`/","excerpt":"刚开始踩的坑打开vue项目后快乐npm install，然后一堆报错，内容如图：","text":"刚开始踩的坑打开vue项目后快乐npm install，然后一堆报错，内容如图：查了很久不知道这个神秘的errno:-4048是个什么，google告诉我的方法基本没有用，有梦想的同学可以试试： 这是overflow上的回答： 12npm cache cleannpm cache clean --force 其他的回答： 1npm cache verify #校验缓存依赖 包括我问的朋友猜测的可能： npm版本过高，与项目不兼容，我重新安装了整个node，没有用； 磁盘权限不足（当时那个项目所在的文件是只读权限），改了也没有用； 通过同事的验证得出了结果，是项目的配置文件出错，是的： package-lock.json 就是他！罪魁祸首。我删掉这个文件直接重下依赖：npm install就没有问题了。 可以成功运行项目。 验证的过程是： 在其他路径下创建一个新的vue项目，进行相同的依赖安装（比如某某ui包），可以并多次可以成功安装；（由于同是在只读文件夹下创建，排除了磁盘权限问题） 参考： npm安装依赖errno -4048报错 oveflow上的问题","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"},{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"}]},{"title":"语法糖和语法盐","slug":"语法糖和语法盐","date":"2019-03-14T16:00:00.000Z","updated":"2019-03-27T15:04:48.985Z","comments":true,"path":"2019/03/15/语法糖和语法盐/","link":"","permalink":"http://yoursite.com/2019/03/15/语法糖和语法盐/","excerpt":"前几天看到的一个挺有意思的说法，应该是程序员都默认的一个说法吧，觉得不太理解所以去查了一下；","text":"前几天看到的一个挺有意思的说法，应该是程序员都默认的一个说法吧，觉得不太理解所以去查了一下； 语法糖/糖衣语法​ 这个词来自于英国计算机科学家彼得·兰丁。 ​ 指计算机语言中添加的某种语法，这种语法对语言的功能没有影响，但是更方便程序员使用。语法糖让程序更加简洁，有更高的可读性。 ​ 以上来自wiki。 ​ 就是说把在不改变结构和功能的基础上，把代码写得更加简单易懂了； ​ 从代码中来说就是for循环作为例子（比起while循环看起来更易懂），或者比如vue中的v-model； ​ 更加浅显的话就是知乎里的那个回答了： 就相当于汉语里的成语。 即，用更简练的言语表达较复杂的含义。在得到广泛接受的情况之下，可以提升交流的效率。 ​ 这个理解就很OK； ​ 看评论说这个回答就是一个语法糖，也挺有道理的哈哈哈。 语法盐语法盐（英语：syntactic salt）是指在计算机语言中为了降低程序员撰写出不良代码的设计，但其中仍会有潜藏错误存在的可能。 举例：（java中不允许将float变量赋予声明为int的变量，但是c和c++会自动把float变量舍去小数并赋值给int类型的变量） 123int a;float pi=3.1415;a=pi; //报错 语法糖精/语法糖浆语法糖精（Syntactic saccharin），是指语法上没必要的添砖加瓦，根本没有带来使用的便利。 简而言之，就是失败的语法糖； 语法海洛因语法海-洛因（Syntactic saccharin），是指过于喜欢操作符重载，表面上程序紧凑了，但最后程序可能成天书了。 参考： 什么是语法糖","categories":[],"tags":[{"name":"碎片","slug":"碎片","permalink":"http://yoursite.com/tags/碎片/"}]},{"title":"不优雅的windows10","slug":"不优雅的windows10","date":"2018-11-15T16:00:00.000Z","updated":"2018-11-19T07:27:06.178Z","comments":true,"path":"2018/11/16/不优雅的windows10/","link":"","permalink":"http://yoursite.com/2018/11/16/不优雅的windows10/","excerpt":"主要是重置了一下系统，然后这里记录一下安装好win10之后要做的事情，主要还是要安装的软件。格式化万岁！这个标题是因为：太多人想用得优雅了，我win10就比较普通。","text":"主要是重置了一下系统，然后这里记录一下安装好win10之后要做的事情，主要还是要安装的软件。格式化万岁！这个标题是因为：太多人想用得优雅了，我win10就比较普通。 装机必备基础款0 驱动与系统支持框架由于是重置，基本的驱动和框架都在…… 1 浏览器Windows下肯定是大部分人推荐chrome了。界面美观又好用。除此之外的话，就是有火狐浏览器、夸克浏览器等。国产浏览器好像大部分不受待见。所以我也不尝试了。关于chrome，主要在于它的插件。所以这里我要去根据个人情况来装插件了。 1.谷歌访问助手：主要作用就是不翻墙使用谷歌搜索。所以可以在不翻墙的情况下打开chrome网上应用商店来下载插件。2.Google翻译：可以翻译全英文网页。3.Infinty：可以设置新的标签页。有自带的todolist，并且可以做笔记。看起来很不错的样子。4.AdBlock：拦截广告！划重点。5.Tampermonkey：神器油猴，可以配合很多脚本使用。6.Stylish-为任意网站自定义主题：以后看LJJ可以改CSS了！！快乐！7.书签侧边栏：一般我都是隐藏书签栏，所以这个很有用。功能见名字。 Chrome Firefox 夸克浏览器 装完后记得同步账号呀。 2 通讯工具这些不必多说，不过TIM界面真的而不太好看啊，惆怅。 QQ【下了TIM试试 YY 微信【在还没有非常需要的情况下我不想下载它…… 3 输入法 讯飞 搜狗 百度 Google 狼毫 4 各种工具下载工具or存储突然怀念以前的RF。不下百度云因为Chrome插件可以直接下载，懒得多下个软件了，我用得也不算多。云存储有微云、onedrive，足够了。 迅雷 freedownloadmanager【IDM也挺好 百度云【我发现我用百度云下载网速比较快所以真香…… 坚果云 压缩软件 Bandizip 7Z【这个也很多人推荐，但是我一个足够了 5 办公软件 Adobe Acrobat【pdf阅读器 Sumatra PDF【轻量级PDF阅读器，适合只需要阅读PDF的人，比如我 Typora【不必多说了 Yu Writer【markdown编辑器 小书匠【markdown编辑器，我最爱没有之一。 有道云笔记【markdown不能插入图片，我不喜欢 X-mind【思维导图 iSlide 【PPT插件，我暂时不需要，可以存个档 6 安全软件其实Windows自带的Windows defender一般情况也够用了。不过为了安全，还是可以准备一个好用的安全软件。360和金山毒霸都有一些大众所知的毛病，所以下了大家都推荐的火绒。没有乱七八糟的广告，也不会绑定奇奇怪怪的软件，还是比较清爽的。 火绒安全软件 Avast【杀毒功能强大，但是免费版没有网络防护模块 快乐肥宅1 提高效率 Listary【也是快速搜索，也可以当作快速启动器来用 Everything【用于快速搜索 Quicker 这里是介绍视频 Snipaste【截图软件，不过我经常挂着QQ，然后贴图等功能暂时还不是很需要，所以不下了。 Wox【快速启动器 官方插件安装 WGestures【鼠标手势 [] Capslock+【提高键盘输入效率 2 生活向 眼睛护士 酷狗 i5sing Listen1【我下的美化版，可以下其它音乐软件的库音乐 网易云音乐 irreader【RSS订阅器 3 美化累了，主题不想换，就换下鼠标指针和部分图标看着舒服就行。图标：FolderIconTool【批量修改图标的小工具easyiconflaticon指针以前下的我备份了这里没再找过。 个人向程序猿随便列点普遍的，这个我自己看情况来。 sublime text3 node.js git IDEA VS eclipse/myeclipse mysql/sqlsever/oracle/MongoDB 后期向 Adobe CC2019全家桶 密码：ewyu 【根据需要吧，我这里PS+AU+AI，破解作者为@vposy cubase vegas mikumikudance 一些找软件的网站正版中国软矿异次元软件世界少数派","categories":[],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"LeetCode题解——位运算","slug":"LeetCode题解——位运算","date":"2018-10-15T16:00:00.000Z","updated":"2018-12-12T08:34:46.950Z","comments":true,"path":"2018/10/16/LeetCode题解——位运算/","link":"","permalink":"http://yoursite.com/2018/10/16/LeetCode题解——位运算/","excerpt":"JavaScript解答LeetCode，位运算分类。陆续更新。","text":"JavaScript解答LeetCode，位运算分类。陆续更新。 78 子集给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。1234567891011121314示例:输入: nums = [1,2,3]输出:[ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], []] 关于使用位运算来解：首先，先理解用位串来表示子集。如题目中的，nums=[1,2,3]，我们可以用三位二进制数来表示它的子集： 二进制位串 对应子集 00000 000 [] 00000 001 [1] 00000 010 [2] 00000 011 [1,2] 00000 100 [3] 00000 101 [1,3] 00000 110 [2,3] 00000 111 [1,2,3] 这里的空格没有什么啥意思，就是为了看起来比较方便。【因为一般存储8位，我们这里只用了三位怕看不清楚。那么我们在计算机中如何存储这些二进制位串呢，我们可以用直接用十进制数字表示，比如1-8.可以看出来，每一位代表了一个集合的元素。也就是说，我们只要比较1-8的8个数字中哪些位为1，就可以知道这个子集是什么了。所以解答为：12345678910111213141516171819202122var subsets = function(nums)&#123; var list=[]; //定义结果数组 var n=nums.length; //n存储集合长度 var l=Math.pow(2,n); //用1-l期间的数的二进制表示的位串，来表示该全集所有的子集 var array=[];//这里设置array作为子集的元素，因为结果数组的元素还是数组 for(let i=1;i&lt;l;i++) //总共有l个子集 &#123; for(let j=0;j&lt;n;j++) //每个子集的二进制位串有几位有效数字 &#123; if((1&lt;&lt;j)&amp;i) //查看i的哪些位为1 &#123; array.push(nums[j]); //i为1的位对应的元素加入子集 list[i]=array; &#125; &#125; array=[]; &#125; return list;&#125; 参考文章：LeetCode 每日一题 78. 子集 136 只出现一次的数字给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。示例1：12输入：[2,2,1]输出：1 示例2：12输入：[4,1,2,1,2]输出：4 这里我们主要使用异或的方法来进行查找。异或运算法则： a ⊕ a = 0 ；0⊕a=a； a ⊕ b = b ⊕ a； a ⊕b ⊕ c = a ⊕ (b ⊕ c) = (a ⊕ b) ⊕ c； 第一条可以看出来，只要出现两次的元素，进行异或可以使其结果为0。【题目中的条件粗体标出来了】所以举例来说：[4,1,2,1,2]这个数组，我们对它进行全部异或运算。即123 4⊕1⊕2⊕1⊕2= 4⊕（1⊕1）⊕（2⊕2）=4 所以对于这一题，我们只要让数组内所有的元素都进行异或运算就可以得出只出现一次的数字。 解决方案：123456789var singleNumber = function(nums) &#123; var n=0; for(let i=0;i&lt;nums.length;i++) &#123; n ^=nums[i]; &#125; return n;&#125;;","categories":[],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://yoursite.com/tags/leetcode/"},{"name":"位运算","slug":"位运算","permalink":"http://yoursite.com/tags/位运算/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]}]}