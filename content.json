{"meta":{"title":"好高兴啊又吃成长快乐了","subtitle":"肥宅快乐站","description":"乌鸦很像写字台","author":"黄瓜","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-11-19T14:40:29.000Z","updated":"2018-11-19T14:48:34.046Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"乌鸦很像写字台关于前端 / 摄影 / 动漫萌新程序猿 欢迎小伙伴一起玩耍。 @乌鸦很像写字台企鹅：413137841"},{"title":"tags","date":"2018-11-19T14:36:25.000Z","updated":"2018-11-19T14:36:45.012Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-11-19T14:35:29.000Z","updated":"2018-11-19T14:35:59.572Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"从零开始搭建nodeJs个人博客","slug":"从零开始搭建nodeJs个人博客","date":"2019-03-27T16:00:00.000Z","updated":"2019-04-06T15:35:19.893Z","comments":true,"path":"2019/03/28/从零开始搭建nodeJs个人博客/","link":"","permalink":"http://yoursite.com/2019/03/28/从零开始搭建nodeJs个人博客/","excerpt":"1 前后端分离的项目初始化环境准备node.js express vue","text":"1 前后端分离的项目初始化环境准备node.js express vue 安装webpack：npm install webpack -g 安装vue-cli：npm install vue-cli -g 项目初始化服务端： npm init 安装express：npm install express --save 安装mongoose：npm install mongoose --save 安装body-parser：npm i body-parser --save 安装bcrypt：npm i bcrypt --save 【用于加密，这个我npm安装失败，用cnpm才能成功； 安装jsonwebtoken：npm i jsonwebtoken --save 安装express-jwt：npm i express-jwt --save 客户端： 创建项目：vue init webpack 项目名 进入项目文件夹： cd 项目名 安装项目依赖：npm install 安装vue路由模块：npm install vue-router --save 网络请求模块：npm install vue-resource --save 安装依赖时出错：npm ERR! code ELIFECYCLE 解决方法参考： PhantomJS not found on PATH PhantomJS not found on PATH #11 npm install 安装phantomjs时npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! phantomjs-prebuilt@2.1.15 代码分层12345678910// 后端项目结构BlogServer |_____node_modules |_____public // 静态资源 |_____routes // 路由部分 |_____schemas // 存放数据库相关文件 |_____controller //业务逻辑 |_____models // 操作数据库的文件 |_____app.js // 项目入口 |_____README.md 123456789101112131415// 前端项目结构BlogClient |_____router |_____util //工具类 |_____api |_____src |____assets |____static |____components |____main.js |____App.vue //项目主页 |_____node_modules |_____build |_____config |_____test 2 初步连接数据库，实现登录注册1 连接数据库 安装MongoDB：官网 安装过程参考，我安装的版本为4.0.8，基本不需要再手动配置； 可双击\\安装目录\\bin\\mongo.exe启动MongoDB（与cmd下输入mongo等价），url输入127.0.0.1:27017检查是否运行； 12// 成功运行显示：It looks like you are trying to access MongoDB over HTTP on the native driver port. 配置数据库：npm install mongoose --save 创建数据库【好的我打算找一款合适的mongoDB可视化工具 adminMongo【web、免费 get√ sutdio 3t 【收费 compass【官方gui 1）git clone adminMongo 这里遇到一个问题：vsvode里git命令报错：无法将“git”项识别为 cmdlet、函数、脚本文件或可运行程序的名称； 解决方案是：关闭vs-code，右键以管理员方式运行；长期的话：右键-属性-兼容性-以管理员身份运行此程序-应用； 然后我又遇到一个问题：……好惨；错误提示如下： 1234CAfile: F:/【程序猿】/Git/Git/mingw64/ssl/certs/ca-bundle.crtCApath: none// 可能是因为我之前用的中文名称，后来改了…… 解决方法：git提示error setting certificate verify locations解决办法 首先，修改路径为正确的：git config --system http.sslcainfo &quot;F:\\0to1\\Git\\Git\\mingw64\\ssl\\certs\\ca-bundle.crt&quot; 好的，然后我就可以了；棒，不愧是我。 2）安装依赖：npm install 3）启动：npm start or node app.js 直接打开http://127.0.0.1:1234/ 就能进入可视化界面，具体使用可以看readme； 有机会的自己写一篇博客记录一下； 连接数据库（测试数据库是否能正常连接） 1234567891011// index.js// 加载数据库模块const mongoose = require(\"mongoose\");mongoose.connect('mongodb://localhost:27017/BlogDB',function(err)&#123; if(err)&#123; console.log('数据库连接失败'); &#125;else&#123; console.log('数据库连接成功'); app.listen(2333); &#125;&#125;); 2 注册接口实现1）使用body-parser插件，可以对post请求的请求体进行解析。 12345// index.js// 引入body-parser插件var bodyParser = require('body-parser');app.use(bodyParser.urlencoded(&#123; extended: false &#125;));app.use(bodyParser.json()); 2）创建注册页面的路由 12345678910// /routers/regist.js// 配置路由const express = require('express');const router = express.Router();router.get('/regist',function(res,rep)&#123; rep.send('这是注册页'); &#125;);module.exports = router; 3）加载路由 123456789101112131415161718192021222324// index.jsvar express = require('express');var app = express();var bodyParser = require('body-parser');// 注意解析要放在上面app.use(bodyParser.urlencoded(&#123; extended: false &#125;))app.use(bodyParser.json())app.use('/user',require('./routers/user'));// 加载数据库模块const mongoose = require(\"mongoose\");mongoose.connect('mongodb://localhost:27017/BlogDB',function(err)&#123; if(err)&#123; console.log('数据库连接失败'); &#125;else&#123; console.log('数据库连接成功'); app.listen(2333,function()&#123; console.log('server is on \"http://localhost:2333\"'); &#125;); &#125;&#125;); 可打开http://localhost:2333/user/login 或 http://localhost:2333/user/regist 查看路由设置情况； 4）在schemas文件夹下新建user.js , 用户相关的Schema（数据库）； 12345678910111213141516// schemas/user.jsvar mongoose = require('mongoose');module.exports = new mongoose.Schema(&#123; // 用户id userid: String, // 用户名 userName: String, // 密码 password: String, // 注册日期 creatDate: Date, // 头像 avator: String, // 这是什么？？ token: String&#125;) 5）在models文件夹下新建user.js, 创建用户相关的模型，数据库的相关操作都是通过models下面我们创建的模型来操作的。 123var mongoose = require('mongoose')var userSchema = require('../schemas/user')module.exports = mongoose.model('User', userSchema) 6）注册用户的接口： 12345678910111213141516171819202122232425262728293031323334353637383940// routers/user.jsrouter.post('/regist', function(req, res, next) &#123; var userName = req.body.userName var password = req.body.passWord var rePassWord = req.body.rePassWord // 账号和密码是否为空交给前端判断，两次密码是否一致同理； // 若不符合要求则不传值； User.findOne(&#123; userName: userName &#125;).then((userInfo) =&gt; &#123; if (userInfo) &#123; // 数据库中有 responseData.success = false responseData.message = '该用户已存在' res.json(responseData) return &#125; else &#123; // 写入数据库 //获取hash值 密码加密 var hash = bcrypt.hashSync(password, 10) //把hash值赋值给password变量 password = hash var user = new User(&#123; userName: userName, passWord: password, creatDate: new Date(), &#125;) return user.save() &#125; &#125;).then((newUserInfo) =&gt; &#123; responseData.success = true responseData.message = '恭喜您，注册成功' responseData.data = &#123; userName: newUserInfo.userName, userId: newUserInfo._id &#125; res.json(responseData) &#125;)&#125;); 参考： https://camp.qianduan.group/koa2/2/1/1 【不用koa2了 https://segmentfault.com/a/1190000015575280 02-个人博客笔记-登录注册接口的实现 一个 Vue + Node + MongoDB 博客系统 MongoDb可视化工具推荐","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"},{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"nodeJs","slug":"nodeJs","permalink":"http://yoursite.com/tags/nodeJs/"}]},{"title":"关于新手选择服务器（穷苦人民的烦恼）","slug":"关于新手选择服务器（穷苦人民的烦恼）","date":"2019-03-26T16:00:00.000Z","updated":"2019-03-28T14:15:34.476Z","comments":true,"path":"2019/03/27/关于新手选择服务器（穷苦人民的烦恼）/","link":"","permalink":"http://yoursite.com/2019/03/27/关于新手选择服务器（穷苦人民的烦恼）/","excerpt":"1 关于服务器的基础知识","text":"1 关于服务器的基础知识 什么是vps什么是CMS服务器可以用来做什么以上内容决定慢慢更新。 2 具体的服务器可选项国内目前只看学生优惠： 配置 价格 备注 腾讯云 CPU：1核内存：2G带宽：1M硬盘：Linux/Windows 50G ￥10/月 需要抢购，0点6个月使用时长 阿里云轻量应用服务器 CPU：1核内存：2G带宽：5M硬盘：40G SSD流量：1000G ￥9.5/月 有效期不能超过学生身份有效期，毕业后不能续费 阿里云云服务器ECS CPU：1核内存：2G带宽：1M硬盘：40G ￥9.5/月 同上 国外 配置 价格 备注 Digital Ocean CPU：1核内存：1G硬盘：25G SSD流量：1T $5/month US TRANSFER传输1T是啥，带宽？ Linode CPU：1核内存：1G硬盘：25G SSD流量：1T $5/month（￥30/月） US 搬砖工（bandewagonghost） 看到一个说售后不好且ip可能被墙…… Vultr CPU：1核内存：512M硬盘：10G SSD带宽：0.5T(ipv6) $2.5/month（15/月） 其实我不是很烦恼，因为我没有翻墙的硬需求，能上个Google就够了。所以便宜才是我的选择。over。由于目前只是练手个人站，配置没需求，所以不用纠结，真好。 参考： VULTR 2019年全部优惠码盘点（支持支付宝） 知乎VULTR话题 2019优质VPS服务商推荐 VPS大全","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"}]},{"title":"vue项目的坑:error-4048","slug":"vue项目的坑-`error-4048`","date":"2019-03-25T16:00:00.000Z","updated":"2019-03-27T15:11:23.003Z","comments":true,"path":"2019/03/26/vue项目的坑-`error-4048`/","link":"","permalink":"http://yoursite.com/2019/03/26/vue项目的坑-`error-4048`/","excerpt":"刚开始踩的坑打开vue项目后快乐npm install，然后一堆报错，内容如图：","text":"刚开始踩的坑打开vue项目后快乐npm install，然后一堆报错，内容如图：查了很久不知道这个神秘的errno:-4048是个什么，google告诉我的方法基本没有用，有梦想的同学可以试试： 这是overflow上的回答： 12npm cache cleannpm cache clean --force 其他的回答： 1npm cache verify #校验缓存依赖 包括我问的朋友猜测的可能： npm版本过高，与项目不兼容，我重新安装了整个node，没有用； 磁盘权限不足（当时那个项目所在的文件是只读权限），改了也没有用； 通过同事的验证得出了结果，是项目的配置文件出错，是的： package-lock.json 就是他！罪魁祸首。我删掉这个文件直接重下依赖：npm install就没有问题了。 可以成功运行项目。 验证的过程是： 在其他路径下创建一个新的vue项目，进行相同的依赖安装（比如某某ui包），可以并多次可以成功安装；（由于同是在只读文件夹下创建，排除了磁盘权限问题） 参考： npm安装依赖errno -4048报错 oveflow上的问题","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"},{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"}]},{"title":"语法糖和语法盐","slug":"语法糖和语法盐","date":"2019-03-14T16:00:00.000Z","updated":"2019-03-27T15:04:48.985Z","comments":true,"path":"2019/03/15/语法糖和语法盐/","link":"","permalink":"http://yoursite.com/2019/03/15/语法糖和语法盐/","excerpt":"前几天看到的一个挺有意思的说法，应该是程序员都默认的一个说法吧，觉得不太理解所以去查了一下；","text":"前几天看到的一个挺有意思的说法，应该是程序员都默认的一个说法吧，觉得不太理解所以去查了一下； 语法糖/糖衣语法​ 这个词来自于英国计算机科学家彼得·兰丁。 ​ 指计算机语言中添加的某种语法，这种语法对语言的功能没有影响，但是更方便程序员使用。语法糖让程序更加简洁，有更高的可读性。 ​ 以上来自wiki。 ​ 就是说把在不改变结构和功能的基础上，把代码写得更加简单易懂了； ​ 从代码中来说就是for循环作为例子（比起while循环看起来更易懂），或者比如vue中的v-model； ​ 更加浅显的话就是知乎里的那个回答了： 就相当于汉语里的成语。 即，用更简练的言语表达较复杂的含义。在得到广泛接受的情况之下，可以提升交流的效率。 ​ 这个理解就很OK； ​ 看评论说这个回答就是一个语法糖，也挺有道理的哈哈哈。 语法盐语法盐（英语：syntactic salt）是指在计算机语言中为了降低程序员撰写出不良代码的设计，但其中仍会有潜藏错误存在的可能。 举例：（java中不允许将float变量赋予声明为int的变量，但是c和c++会自动把float变量舍去小数并赋值给int类型的变量） 123int a;float pi=3.1415;a=pi; //报错 语法糖精/语法糖浆语法糖精（Syntactic saccharin），是指语法上没必要的添砖加瓦，根本没有带来使用的便利。 简而言之，就是失败的语法糖； 语法海洛因语法海-洛因（Syntactic saccharin），是指过于喜欢操作符重载，表面上程序紧凑了，但最后程序可能成天书了。 参考： 什么是语法糖","categories":[],"tags":[{"name":"碎片","slug":"碎片","permalink":"http://yoursite.com/tags/碎片/"}]},{"title":"不优雅的windows10","slug":"不优雅的windows10","date":"2018-11-15T16:00:00.000Z","updated":"2018-11-19T07:27:06.178Z","comments":true,"path":"2018/11/16/不优雅的windows10/","link":"","permalink":"http://yoursite.com/2018/11/16/不优雅的windows10/","excerpt":"主要是重置了一下系统，然后这里记录一下安装好win10之后要做的事情，主要还是要安装的软件。格式化万岁！这个标题是因为：太多人想用得优雅了，我win10就比较普通。","text":"主要是重置了一下系统，然后这里记录一下安装好win10之后要做的事情，主要还是要安装的软件。格式化万岁！这个标题是因为：太多人想用得优雅了，我win10就比较普通。 装机必备基础款0 驱动与系统支持框架由于是重置，基本的驱动和框架都在…… 1 浏览器Windows下肯定是大部分人推荐chrome了。界面美观又好用。除此之外的话，就是有火狐浏览器、夸克浏览器等。国产浏览器好像大部分不受待见。所以我也不尝试了。关于chrome，主要在于它的插件。所以这里我要去根据个人情况来装插件了。 1.谷歌访问助手：主要作用就是不翻墙使用谷歌搜索。所以可以在不翻墙的情况下打开chrome网上应用商店来下载插件。2.Google翻译：可以翻译全英文网页。3.Infinty：可以设置新的标签页。有自带的todolist，并且可以做笔记。看起来很不错的样子。4.AdBlock：拦截广告！划重点。5.Tampermonkey：神器油猴，可以配合很多脚本使用。6.Stylish-为任意网站自定义主题：以后看LJJ可以改CSS了！！快乐！7.书签侧边栏：一般我都是隐藏书签栏，所以这个很有用。功能见名字。 Chrome Firefox 夸克浏览器 装完后记得同步账号呀。 2 通讯工具这些不必多说，不过TIM界面真的而不太好看啊，惆怅。 QQ【下了TIM试试 YY 微信【在还没有非常需要的情况下我不想下载它…… 3 输入法 讯飞 搜狗 百度 Google 狼毫 4 各种工具下载工具or存储突然怀念以前的RF。不下百度云因为Chrome插件可以直接下载，懒得多下个软件了，我用得也不算多。云存储有微云、onedrive，足够了。 迅雷 freedownloadmanager【IDM也挺好 百度云【我发现我用百度云下载网速比较快所以真香…… 坚果云 压缩软件 Bandizip 7Z【这个也很多人推荐，但是我一个足够了 5 办公软件 Adobe Acrobat【pdf阅读器 Sumatra PDF【轻量级PDF阅读器，适合只需要阅读PDF的人，比如我 Typora【不必多说了 Yu Writer【markdown编辑器 小书匠【markdown编辑器，我最爱没有之一。 有道云笔记【markdown不能插入图片，我不喜欢 X-mind【思维导图 iSlide 【PPT插件，我暂时不需要，可以存个档 6 安全软件其实Windows自带的Windows defender一般情况也够用了。不过为了安全，还是可以准备一个好用的安全软件。360和金山毒霸都有一些大众所知的毛病，所以下了大家都推荐的火绒。没有乱七八糟的广告，也不会绑定奇奇怪怪的软件，还是比较清爽的。 火绒安全软件 Avast【杀毒功能强大，但是免费版没有网络防护模块 快乐肥宅1 提高效率 Listary【也是快速搜索，也可以当作快速启动器来用 Everything【用于快速搜索 Quicker 这里是介绍视频 Snipaste【截图软件，不过我经常挂着QQ，然后贴图等功能暂时还不是很需要，所以不下了。 Wox【快速启动器 官方插件安装 WGestures【鼠标手势 [] Capslock+【提高键盘输入效率 2 生活向 眼睛护士 酷狗 i5sing Listen1【我下的美化版，可以下其它音乐软件的库音乐 网易云音乐 irreader【RSS订阅器 3 美化累了，主题不想换，就换下鼠标指针和部分图标看着舒服就行。图标：FolderIconTool【批量修改图标的小工具easyiconflaticon指针以前下的我备份了这里没再找过。 个人向程序猿随便列点普遍的，这个我自己看情况来。 sublime text3 node.js git IDEA VS eclipse/myeclipse mysql/sqlsever/oracle/MongoDB 后期向 Adobe CC2019全家桶 密码：ewyu 【根据需要吧，我这里PS+AU+AI，破解作者为@vposy cubase vegas mikumikudance 一些找软件的网站正版中国软矿异次元软件世界少数派","categories":[],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"LeetCode题解——位运算","slug":"LeetCode题解——位运算","date":"2018-10-15T16:00:00.000Z","updated":"2018-12-12T08:34:46.950Z","comments":true,"path":"2018/10/16/LeetCode题解——位运算/","link":"","permalink":"http://yoursite.com/2018/10/16/LeetCode题解——位运算/","excerpt":"JavaScript解答LeetCode，位运算分类。陆续更新。","text":"JavaScript解答LeetCode，位运算分类。陆续更新。 78 子集给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。1234567891011121314示例:输入: nums = [1,2,3]输出:[ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], []] 关于使用位运算来解：首先，先理解用位串来表示子集。如题目中的，nums=[1,2,3]，我们可以用三位二进制数来表示它的子集： 二进制位串 对应子集 00000 000 [] 00000 001 [1] 00000 010 [2] 00000 011 [1,2] 00000 100 [3] 00000 101 [1,3] 00000 110 [2,3] 00000 111 [1,2,3] 这里的空格没有什么啥意思，就是为了看起来比较方便。【因为一般存储8位，我们这里只用了三位怕看不清楚。那么我们在计算机中如何存储这些二进制位串呢，我们可以用直接用十进制数字表示，比如1-8.可以看出来，每一位代表了一个集合的元素。也就是说，我们只要比较1-8的8个数字中哪些位为1，就可以知道这个子集是什么了。所以解答为：12345678910111213141516171819202122var subsets = function(nums)&#123; var list=[]; //定义结果数组 var n=nums.length; //n存储集合长度 var l=Math.pow(2,n); //用1-l期间的数的二进制表示的位串，来表示该全集所有的子集 var array=[];//这里设置array作为子集的元素，因为结果数组的元素还是数组 for(let i=1;i&lt;l;i++) //总共有l个子集 &#123; for(let j=0;j&lt;n;j++) //每个子集的二进制位串有几位有效数字 &#123; if((1&lt;&lt;j)&amp;i) //查看i的哪些位为1 &#123; array.push(nums[j]); //i为1的位对应的元素加入子集 list[i]=array; &#125; &#125; array=[]; &#125; return list;&#125; 参考文章：LeetCode 每日一题 78. 子集 136 只出现一次的数字给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。示例1：12输入：[2,2,1]输出：1 示例2：12输入：[4,1,2,1,2]输出：4 这里我们主要使用异或的方法来进行查找。异或运算法则： a ⊕ a = 0 ；0⊕a=a； a ⊕ b = b ⊕ a； a ⊕b ⊕ c = a ⊕ (b ⊕ c) = (a ⊕ b) ⊕ c； 第一条可以看出来，只要出现两次的元素，进行异或可以使其结果为0。【题目中的条件粗体标出来了】所以举例来说：[4,1,2,1,2]这个数组，我们对它进行全部异或运算。即123 4⊕1⊕2⊕1⊕2= 4⊕（1⊕1）⊕（2⊕2）=4 所以对于这一题，我们只要让数组内所有的元素都进行异或运算就可以得出只出现一次的数字。 解决方案：123456789var singleNumber = function(nums) &#123; var n=0; for(let i=0;i&lt;nums.length;i++) &#123; n ^=nums[i]; &#125; return n;&#125;;","categories":[],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://yoursite.com/tags/leetcode/"},{"name":"位运算","slug":"位运算","permalink":"http://yoursite.com/tags/位运算/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]}]}